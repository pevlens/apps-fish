"""
Django settings for fishltf project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv(os.getenv('VAULT_SECRETS_FILE', '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-default-key')



# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False') == 'True'

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'appfish.apps.AppfishConfig',
    'manageappfish.apps.ManageappfishConfig',
    'minio_storage',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'fishltf.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'fishltf.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DATABASE_NAME', 'mydb'),
        'USER': os.getenv('DATABASE_USER', 'myuser'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD', 'mypassword'),
        'HOST': os.getenv('DATABASE_HOST', 'localhost'),
        'PORT': os.getenv('DATABASE_PORT', '5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# MEDIA_URL = '/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/



# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]


LOGIN_URL = '/manage/auth/'
LOGIN_REDIRECT_URL = '/manage/users/'



STORAGES = {
    'default': {
        'BACKEND': 'minio_storage.storage.MinioMediaStorage',
    },
    "staticfiles": {  # Для статики (если нужно)
        "BACKEND": "minio_storage.storage.MinioStaticStorage",
    },
}
# STATIC_URL = 'static/'


# Убедись, что все параметры настроены правильно:
MINIO_STORAGE_ENDPOINT = 'minio-api.psncorp.store'  # Адрес MinIO сервера
MINIO_STORAGE_ACCESS_KEY = os.getenv('AWS_ACCESS_KEY_ID', 'admin')  # ключ доступа
MINIO_STORAGE_SECRET_KEY = os.getenv('AWS_SECRET_ACCESS_KEY', 'admin')  # секретный ключ
MINIO_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME', 'django')   # название бакета
MINIO_STORAGE_USE_HTTPS = True  # использовать ли HTTPS
MINIO_STORAGE_OBJECT_PARAMETERS = {
                                    'CacheControl': 'max-age=86400',     
                                    'Content-Type': 'image/jpg',
                                    'Content-Disposition': 'inline'  }
MINIO_STORAGE_FILE_OVERWRITE = False  # разрешить ли перезаписывание файлов
MINIO_STORAGE_MEDIA_URL = f"https://{MINIO_STORAGE_ENDPOINT}/{MINIO_STORAGE_BUCKET_NAME}/"
MINIO_STORAGE_MEDIA_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME', 'django')
MINIO_STORAGE_AUTO_CREATE_STATIC_BUCKET = True
MINIO_STORAGE_STATIC_BUCKET_NAME = 'django-static'

MEDIA_URL = f"https://{MINIO_STORAGE_ENDPOINT}/{MINIO_STORAGE_BUCKET_NAME}/"
STATIC_URL = f"https://{MINIO_STORAGE_ENDPOINT}/{MINIO_STORAGE_STATIC_BUCKET_NAME}/"

