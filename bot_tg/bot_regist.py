from telegram import Update, ReplyKeyboardRemove
from telegram.ext import (
    ConversationHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler,
)
from sqlalchemy import insert
from value import (
    REGISTER_FIRST_NAME, REGISTER_LAST_NAME, REGISTER_PHONE, REGISTER_METOD_CATCH,
    REGISTER_GEAR_MAIN, REGISTER_BIO, REGISTER_ALIAS, REGISTER_PHOTO,REGISTER_BIRTH,
    PHOTO_DIR, MESSAGES, USER_ID_FIELD, IMAGE_PATH_FIELD, CALLBACK_CANCEL_EDIT, CALLBACK_REGISTER
)
import os
import re
import logging
from db_connect import *
from bot_ui import get_main_keyboard
from datetime import datetime
from bot_minio import *
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)



async def register_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:

    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    message = query.message

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    loading_message = await message.reply_text(MESSAGES["loading_message"], quote=False)

    try:
        await loading_message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")

    await message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=ReplyKeyboardRemove())
    return REGISTER_FIRST_NAME


async def register_first_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–®–∞–≥ 1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏."""
    context.user_data['first_name'] = update.message.text.strip()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤–≤–µ–ª –∏–º—è: {context.user_data['first_name']}")
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    return REGISTER_LAST_NAME


async def register_last_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏."""
    context.user_data['last_name'] = update.message.text.strip()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤–≤–µ–ª —Ñ–∞–º–∏–ª–∏—é: {context.user_data['last_name']}")
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 7XXXXXXXXXX –∏–ª–∏ 375XXXXXXXXX) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '-' –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å:")
    return REGISTER_PHONE


async def register_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–®–∞–≥ 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
    phone_number = update.message.text.strip()
    print(phone_number)
    if phone_number == "-":
        context.user_data['phone_number'] = None
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ª–æ–≤–ª–∏:")
        return REGISTER_METOD_CATCH
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not re.match(r'^(7\d{10}|375\d{9})$', phone_number):
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ 7XXXXXXXXXX –∏–ª–∏ 375XXXXXXXXX:")
        return REGISTER_PHONE
    context.user_data['phone_number'] = phone_number
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤–≤–µ–ª —Ç–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone_number']}")
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ª–æ–≤–ª–∏:")
    return REGISTER_METOD_CATCH


async def register_metod_catch(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–®–∞–≥ 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –ª–æ–≤–ª–∏."""
    context.user_data['metod_catch'] = update.message.text.strip()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤–≤–µ–ª –º–µ—Ç–æ–¥ –ª–æ–≤–ª–∏: {context.user_data['metod_catch']}")
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —Å–Ω–∞—Å—Ç—å:")
    return REGISTER_GEAR_MAIN


async def register_gear_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–®–∞–≥ 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–Ω–∞—Å—Ç–∏."""
    context.user_data['gear_main'] = update.message.text.strip()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤–≤–µ–ª —Å–Ω–∞—Å—Ç—å: {context.user_data['gear_main']}")
    await update.message.reply_text("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ (–∫—Ä–∞—Ç–∫–æ):")
    return REGISTER_BIO


async def register_bio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–®–∞–≥ 6: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ."""
    context.user_data['bio'] = update.message.text.strip()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤–≤–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ: {context.user_data['bio']}")
    await update.message.reply_text(    "üìÖ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
    "–ü—Ä–∏–º–µ—Ä: 15.05.1990")
    return REGISTER_BIRTH



async def register_birth(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–®–∞–≥ 6: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ."""
    context.user_data['birth_date'] = update.message.text.strip()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤–≤–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ: {context.user_data['bio']}")

    try:
        birth_date = datetime.strptime(context.user_data['birth_date'], "%d.%m.%Y").date()
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        return REGISTER_BIRTH

    if birth_date > datetime.now().date():
        await update.message.reply_text("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")
        return REGISTER_BIRTH

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∫–ª–∏—á–∫—É:")
    return REGISTER_ALIAS



async def register_alias(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–®–∞–≥ 7: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª–∏—á–∫–∏."""

    context.user_data['alias'] = update.message.text.strip()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤–≤–µ–ª –∫–ª–∏—á–∫—É: {context.user_data['alias']}")
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")
    return REGISTER_PHOTO


async def register_photo(update: Update, context: ContextTypes.DEFAULT_TYPE, UserTgTable) -> int:
    """–®–∞–≥ 8: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    user = update.effective_user

    if update.message.photo:
        photo_file = await update.message.photo[-1].get_file()
        # photo_path = f"{PHOTO_DIR}/{user.id}_profile.jpg"
        file_bytes = await photo_file.download_as_bytearray()
        object_name = f"avatars/{user.id}_profile.jpg"
        # await photo_file.download_to_drive(photo_path)
        minio_path = await upload_to_minio(file_bytes, object_name)
        print(minio_path)
        context.user_data[IMAGE_PATH_FIELD] = minio_path
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–æ—Ç–æ.")
        await update.message.reply_text(MESSAGES["photo_updated"])
    else:
        context.user_data[IMAGE_PATH_FIELD] = "default.jpg"
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—Ä–æ–ø—É—Å—Ç–∏–ª –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ.")
        await update.message.reply_text(MESSAGES["no_photo_sent"])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    stmt = UserTgTable.insert().values(
        userid=user.id,
        username=user.username,
        first_name=context.user_data.get('first_name'),
        last_name=context.user_data.get('last_name'),
        phone_number=context.user_data.get('phone_number'),
        metod_catch=context.user_data.get('metod_catch'),
        gear_main=context.user_data.get('gear_main'),
        bio=context.user_data.get('bio'),
        birth_date=datetime.strptime(context.user_data['birth_date'], "%d.%m.%Y").date(),
        alias=context.user_data.get('alias'),
        image=context.user_data.get(IMAGE_PATH_FIELD)
    )



    with engine.connect() as conn:
        conn.execute(stmt)

        conn.commit()


    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
    await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",reply_markup=get_main_keyboard(True))
    
    return ConversationHandler.END


async def cancel_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    await update.message.reply_text(MESSAGES["edit_canceled"], reply_markup=None)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard(True))
    return ConversationHandler.END


# –î–∏–∞–ª–æ–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
register_conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(register_button, pattern=f"^{CALLBACK_REGISTER}$")],  # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Inline-–∫–Ω–æ–ø–∫—É "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
    states={
        REGISTER_FIRST_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_first_name)],
        REGISTER_LAST_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_last_name)],
        REGISTER_PHONE: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, register_phone),
            MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel_registration)  # –û—Ç–º–µ–Ω–∞ –Ω–∞ –ª—é–±–æ–º —à–∞–≥–µ
        ],
        REGISTER_METOD_CATCH: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_metod_catch)],
        REGISTER_GEAR_MAIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_gear_main)],
        REGISTER_BIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_bio)],
        REGISTER_BIRTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_birth)],
        REGISTER_ALIAS: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_alias)],
        REGISTER_PHOTO: [
            MessageHandler(filters.PHOTO, lambda u, c: register_photo(u, c, UserTgTable)),
            MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: register_photo(u, c, UserTgTable))
        ],
    },
    fallbacks=[
        MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel_registration),  # –û—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç "–û—Ç–º–µ–Ω–∞"
        CallbackQueryHandler(cancel_registration, pattern=f"^{CALLBACK_CANCEL_EDIT}$")  # –û—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ Inline-–∫–Ω–æ–ø–∫—É
    ]
)